<?php

/**
 * @file
 * Install, update and uninstall functions for the Real Time Delphi module.
 */

/**
 * Implements hook_install().
 */
function real_time_delphi_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function real_time_delphi_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_schema().
 */
function real_time_delphi_schema() {
  $schema['survey'] = array(
    'description' => 'This table contains the information about a survey',
    'fields' => array(
        'survey_id' => array(
            'description' => 'The Identifier for a survey',
            'type' => 'serial',
            'not null' => TRUE,
        ),
        'title' => array(
            'description' => 'The title of the survey',
            'type' => 'text',
            'size' => 'normal',
        ),
        'welcome_msg' => array(
            'description' => 'The welcome msg',
            'type' => 'text',
            'size' => 'normal',
        ),
        'end_msg' => array(
            'description' => 'The end msg',
            'type' => 'text',
            'size' => 'normal',
        ),

    ),
    'primary key' => array('survey_id'),
  );

  $schema['survey_users'] = array(
    'description' => 'This tables contains the user tokens and feedbacks',
    'fields' => array(
        'user_id' => array(
            'description' => 'The identifier for the survey users',
            'type' => 'serial',
            'not null' => TRUE,
        ),
        'user_pw' => array(
            'description' => 'The user token',
            'type' => 'text',
            'size' => 'normal',
        ),
        'feedback' => array(
            'description' => 'The feedback of the user',
            'type' => 'text',
            'size' => 'normal',
        ),
        'feedback_date' => array(
            'description' => 'The date of the feedback',
            'type' => 'datetime',
            'mysql_type' => 'datetime',
        ),
        'feedback_experts' => array(
          'description' => 'Further experts suggested by of the user',
          'type' => 'text',
          'size' => 'normal',
        ),
    ),
    'primary key' => array('user_id'),
  );

  $schema['question_user_answers'] = array(
    'description' => 'This tables contains the user tokens and feedbacks',
    'fields' => array(
        'question_user_answers_id' => array(
            'description' => 'The identifier for the answers of a user to a question.',
            'type' => 'serial',
            'not null' => TRUE,
        ),
        'question_id' => array(
            'description' => 'The identifier for the question from the {question} table.',
            'type' => 'int',
        ),
        'answer_id' => array(
            'description' => 'The identifier for the answer from the {question_possible_answers} table.',
            'type' => 'int',
        ),
        'answer' => array(
            'description' => 'The answer',
            'type' => 'text',
            'size' => 'medium',
        ),
        'user_pw' => array(
            'description' => 'The answer',
            'type' => 'text',
            'size' => 'medium',
        ),
        'user_pw' => array(
            'description' => 'The token',
            'type' => 'text',
            'size' => 'medium',
        ),
        'comment' => array(
            'description' => 'Comments from the user',
            'type' => 'text',
            'size' => 'medium',
        ),
        'is_last_answer' => array(
            'description' => 'Flag if it is the last answer',
            'type' => 'int',
            'size' => 'tiny',
        ),

    ),
    'primary key' => array('question_user_answers_id'),
);

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function real_time_delphi_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['real_time_delphi_status'] = [
      'title' => t('Real Time Delphi status'),
      'value' => t('Real Time Delphi value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}
